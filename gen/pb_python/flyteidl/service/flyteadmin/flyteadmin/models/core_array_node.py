# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_identifier import CoreIdentifier  # noqa: F401,E501


class CoreArrayNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_reference': 'CoreIdentifier',
        'concurrency': 'str',
        'size': 'str',
        'min_success_ratio': 'float'
    }

    attribute_map = {
        'task_reference': 'task_reference',
        'concurrency': 'concurrency',
        'size': 'size',
        'min_success_ratio': 'min_success_ratio'
    }

    def __init__(self, task_reference=None, concurrency=None, size=None, min_success_ratio=None):  # noqa: E501
        """CoreArrayNode - a model defined in Swagger"""  # noqa: E501

        self._task_reference = None
        self._concurrency = None
        self._size = None
        self._min_success_ratio = None
        self.discriminator = None

        if task_reference is not None:
            self.task_reference = task_reference
        if concurrency is not None:
            self.concurrency = concurrency
        if size is not None:
            self.size = size
        if min_success_ratio is not None:
            self.min_success_ratio = min_success_ratio

    @property
    def task_reference(self):
        """Gets the task_reference of this CoreArrayNode.  # noqa: E501

        Reference to a registered task which should be called in parallel during node execution.  # noqa: E501

        :return: The task_reference of this CoreArrayNode.  # noqa: E501
        :rtype: CoreIdentifier
        """
        return self._task_reference

    @task_reference.setter
    def task_reference(self, task_reference):
        """Sets the task_reference of this CoreArrayNode.

        Reference to a registered task which should be called in parallel during node execution.  # noqa: E501

        :param task_reference: The task_reference of this CoreArrayNode.  # noqa: E501
        :type: CoreIdentifier
        """

        self._task_reference = task_reference

    @property
    def concurrency(self):
        """Gets the concurrency of this CoreArrayNode.  # noqa: E501

        Defines the minimum number of instances to bring up concurrently at any given point. Note that this is an optimistic restriction and that, due to network partitioning or other failures, the actual number of currently running instances might be more. This has to be a positive number if assigned. Default value is size.  # noqa: E501

        :return: The concurrency of this CoreArrayNode.  # noqa: E501
        :rtype: str
        """
        return self._concurrency

    @concurrency.setter
    def concurrency(self, concurrency):
        """Sets the concurrency of this CoreArrayNode.

        Defines the minimum number of instances to bring up concurrently at any given point. Note that this is an optimistic restriction and that, due to network partitioning or other failures, the actual number of currently running instances might be more. This has to be a positive number if assigned. Default value is size.  # noqa: E501

        :param concurrency: The concurrency of this CoreArrayNode.  # noqa: E501
        :type: str
        """

        self._concurrency = concurrency

    @property
    def size(self):
        """Gets the size of this CoreArrayNode.  # noqa: E501

        Defines the number of instances to launch at most. This number should match the size of the input if the job requires processing of all input data. This has to be a positive number. In the case this is not defined, the back-end will determine the size at run-time by reading the inputs.  # noqa: E501

        :return: The size of this CoreArrayNode.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CoreArrayNode.

        Defines the number of instances to launch at most. This number should match the size of the input if the job requires processing of all input data. This has to be a positive number. In the case this is not defined, the back-end will determine the size at run-time by reading the inputs.  # noqa: E501

        :param size: The size of this CoreArrayNode.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def min_success_ratio(self):
        """Gets the min_success_ratio of this CoreArrayNode.  # noqa: E501

        The min_success_ratio can instead be used to determine the number of individual successfully-completed task executions so that this node can be marked successful.  # noqa: E501

        :return: The min_success_ratio of this CoreArrayNode.  # noqa: E501
        :rtype: float
        """
        return self._min_success_ratio

    @min_success_ratio.setter
    def min_success_ratio(self, min_success_ratio):
        """Sets the min_success_ratio of this CoreArrayNode.

        The min_success_ratio can instead be used to determine the number of individual successfully-completed task executions so that this node can be marked successful.  # noqa: E501

        :param min_success_ratio: The min_success_ratio of this CoreArrayNode.  # noqa: E501
        :type: float
        """

        self._min_success_ratio = min_success_ratio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreArrayNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreArrayNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
